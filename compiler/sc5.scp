/*  Small compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2002
 *  This file may be freely used. No warranties of any kind.
 *
 *  Version: $Id: sc5.scp,v 1.1.1.1 2003/04/26 19:59:22 luxornox Exp $
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {116,32}, {101,32}, {111,110}, {105,110}, {97,114}, {100,32}, {105,130}, {101,110}, {101,114}, {115,32}, {97,108}, {97,116}, {117,110}, {109,135}, {115,34}, {37,142},
  {34,143}, {114,101}, {97,110}, {99,116}, {121,32}, {110,111}, {134,32}, {101,133}, {118,138}, {115,105}, {109,98}, {111,114}, {115,116}, {149,128}, {41,10}, {117,141},
  {102,140}, {160,147}, {103,159}, {132,162}, {117,115}, {114,97}, {100,101}, {98,108}, {105,133}, {152,168}, {161,150}, {131,169}, {101,100}, {99,104}, {97,115}, {101,120},
  {32,144}, {111,108}, {163,128}, {132,165}, {111,102}, {98,129}, {97,32}, {136,32}, {105,137}, {115,10}, {112,145}, {179,148}, {121,154}, {97,167}, {188,177}, {115,190},
  {105,116}, {164,128}, {99,130}, {101,10}, {180,32}, {109,193}, {166,102}, {189,129}, {118,132}, {103,32}, {155,32}, {200,105}, {153,122}, {34,32}, {203,199}, {109,97},
  {100,105}, {111,112}, {146,128}, {139,134}, {176,10}, {209,136}, {144,158}, {194,156}, {197,181}, {104,97}, {117,108}, {110,117}, {198,131}, {101,137}, {99,146}, {219,154},
  {44,32}, {138,32}, {223,183}, {175,186}, {58,212}, {105,99}, {108,111}, {116,111}, {227,115}, {232,115}, {213,139}, {109,139}, {116,10}, {222,157}, {235,173}, {131,201},
  {132,97}, {98,101}, {116,104}, {112,111}, {105,115}, {152,117}, {108,129}, {118,129}, {172,10}, {34,10}, {101,141}, {32,34}, {191,32}, {129,40}, {215,210}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*001*/  "expected token: \"%s\", but found \"%s\"\n",
/*002*/  "only a single statement (or expression) can follow each \"case\"\n",
/*003*/  "reserved\n",
/*004*/  "function \"%s\" is not implemented\n",
/*005*/  "function may not have arguments\n",
/*006*/  "must be assigned to an array\n",
/*007*/  "assertion failed\n",
/*008*/  "must be a constant expression; assumed zero\n",
/*009*/  "invalid array size (negative or zero)\n",
/*010*/  "invalid function or declaration\n",
/*011*/  "invalid outside functions\n",
/*012*/  "invalid function call, not a valid address\n",
/*013*/  "no entry point (no public functions)\n",
/*014*/  "invalid statement; not in switch\n",
/*015*/  "\"default\" case must be the last case in switch statement\n",
/*016*/  "multiple defaults in \"switch\"\n",
/*017*/  "undefined symbol \"%s\"\n",
/*018*/  "initialization data exceeds declared size\n",
/*019*/  "not a label: \"%s\"\n",
/*020*/  "invalid symbol name \"%s\"\n",
/*021*/  "symbol already defined: \"%s\"\n",
/*022*/  "must be lvalue (non-constant)\n",
/*023*/  "array assignment must be simple assignment\n",
/*024*/  "\"break\" or \"continue\" is out of context\n",
/*025*/  "function heading differs from prototype\n",
/*026*/  "no matching \"#if...\"\n",
/*027*/  "invalid character constant\n",
/*028*/  "cannot subscript, not an array\n",
/*029*/  "invalid expression, assumed zero\n",
/*030*/  "compound statement not closed at the end of file\n",
/*031*/  "unknown directive\n",
/*032*/  "array index out of bounds (variable \"%s\")\n",
/*033*/  "array must be indexed (variable \"%s\")\n",
/*034*/  "argument does not have a default value (argument %d)\n",
/*035*/  "argument type mismatch (argument %d)\n",
/*036*/  "empty statement\n",
/*037*/  "invalid string (possibly non-terminated string)\n",
/*038*/  "extra characters on line\n",
/*039*/  "constant symbol has no size\n",
/*040*/  "duplicate \"case\" label (value %d)\n",
/*041*/  "invalid ellipsis, array size is not known\n",
/*042*/  "invalid combination of class specifiers\n",
/*043*/  "character constant exceeds range for packed string\n",
/*044*/  "positional parameters must precede all named parameters\n",
/*045*/  "too many function arguments\n",
/*046*/  "unknown array size (variable \"%s\")\n",
/*047*/  "array sizes must match\n",
/*048*/  "array dimensions must match\n",
/*049*/  "invalid line continuation\n",
/*050*/  "invalid range\n",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/  "only the last dimension may be variable length\n",
/*053*/  "exceeding maximum number of dimensions\n",
/*054*/  "unmatched closing brace\n",
/*055*/  "start of function body without function header\n",
/*056*/  "local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/  "unfinished expression before compiler directive\n",
/*058*/  "duplicate argument; same argument is passed twice\n",
/*059*/  "function argument may not have a default value (variable \"%s\")\n",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/  "operator cannot be redefined\n",
/*062*/  "number of operands does not fit the operator\n",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"\n",
/*064*/  "cannot change predefined operators\n",
/*065*/  "function argument may only have a single tag (argument %d)\n",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")\n",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/  "invalid rational number precision in #pragma\n",
/*069*/  "rational number format already defined\n",
/*070*/  "rational number support was not enabled\n",
/*071*/  "user-defined operator must be declared before use (function \"%s\")\n",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols\n",
/*073*/  "function argument must be an array (argument \"%s\")\n",
#else
  "\257pe\223\227\347k\207:\260\340bu\200fo\214\205\220\012",
  "\202l\224\266s\203g\366\234\213\372\200(\312\351\206) \336 f\261\346w ea\255\373c\256e\371",
  "\221s\210v\370",
  "\252\220 \270\235impl\372t\370",
  "\252\317\224\235\331\367\243t\271",
  "\330\256\231gn\227\347 \222 \263y\012",
  "\256s\210t\226fail\370",
  "\330\266\376\351\206; \256sum\227z\210o\012",
  "\253\273\314\375neg\213i\367\312z\210o\236",
  "\253\252\312\246cl\204\323\012",
  "\253out\231d\201\241\206\271",
  "\253\252c\212l\340\235\266\251add\221s\271",
  "\225 \207tr\224\363\203\200(\225 pu\247\345 \241\206s\236",
  "\253\234\213\372t; \235\203 sw\300\255\012",
  "\042\306a\332t\315c\256\201\330\362\201l\256\200c\256\201\203 sw\300\255 \234\213\372\354",
  "m\332tip\366\306a\332t\211\203\373sw\300\255\371",
  "\214\334\227\277\324",
  "\203\300i\212iz\213\226d\213\266\257ce\254\211\246cl\204\227\314\303",
  "\235\266la\361l\344",
  "\253\374nam\201\220\012",
  "\374\212\221ad\224\334\254\344",
  "\330l\365\375n\202-\327\222t\236",
  "\273\256\231gn\215\200\330\231mp\366\256\231gn\215\354",
  "\042b\221ak\315\312\042\302t\203ue\315\270ou\200\304\302t\257\354",
  "\252head\357\320ff\210\211from pro\347typ\303",
  "\225 \356\357\042#if...\371",
  "\253\255\360\223\267\327\222\354",
  "\355subscript\340\235\222 \263y\012",
  "\253\351\206\340\256sum\227z\210o\012",
  "com\363\214\205\234\213\372\200\235c\346s\227a\200\362\201\207\205\304fil\303",
  "\214k\225wn \320\221\223iv\303",
  "\273\203\246x ou\200\304bo\214d\211(\316\326",
  "\273\330\203\246x\227(\316\326",
  "\262do\335\235\331\367\266\306a\332\200\365\375\262%d\236",
  "\262typ\201m\364\356 (\262%d\236",
  "empt\224\234\213\372\354",
  "\253\234r\357(\363s\231\247\224n\202-t\210m\203\213\227\234r\203g\236",
  "\257t\245 \255\360\223\210\211\202 l\203\303",
  "\376\374\331\211\225 \314\303",
  "dupl\345\213\201\042c\256e\315la\361l (\365\201%d\236",
  "\253ellip\231s\340\273\314\201\270\235k\225wn\012",
  "\253co\232\203\213\226\304cl\256\211specifi\210\271",
  "\255\360\223\267\376\257ce\254\211r\222g\201f\312pack\227\234r\203g\012",
  "\363\231t\206\341p\360met\210\211\305\272c\254\201\212l nam\227p\360met\210\271",
  "\347o m\222\224\252\243t\271",
  "\214k\225wn \273\314\375\316\326",
  "\273\314\335\305\356\012",
  "\273\320\215s\206\211\305\356\012",
  "\253l\203\201\302t\203u\323\012",
  "\253r\222g\303",
  "\253subscript\340\244\201\042[ ]\315\352\233\211\202 \317j\312\320\215s\206\271",
  "\202l\224\362\201l\256\200\320\215s\226\317\224\265\316l\207g\362\012",
  "\257ce\254\357\317ximum \342\304\320\215s\206\271",
  "\214\356\227c\346s\357b\245c\303",
  "\234\204\200\304\252bod\224w\300hou\200\252head\210\012",
  "\346c\341\313\275\335\222\205\252\243t\211\355\265pu\247\345 (\316\326",
  "\214f\203\364h\227\351\226\361f\233\201compil\267\320\221\223iv\303",
  "dupl\345\213\201\243t; sam\201\262\270p\256s\227tw\345\303",
  "\252\262\317\224\235\331\367\266\306a\332\200\365\375\316\326",
  "m\332tip\366\042#else\315\320\221\223iv\335\361twe\207\373#if ... #\207\320f\371",
  "\352\312\355\265\221\334\370",
  "\342\304\325\222d\211do\335\235fi\200\362\201\352\233\012",
  "\252\221s\332\200ta\311\304\352\233\260 \330\220\012",
  "\355\255\222g\201\272\334\227\352\233\271",
  "\252\262\317\224\202l\224\331\367\266s\203g\366ta\311(\262%d\236",
  "\252\262\317\224\235\265\266\221f\210\207c\201\262\312\222 \273(\262\326",
  "\316\355\265bo\362 \266\221f\210\207c\201\222\205\222 \273(\316\326",
  "\253r\323\341\342\272c\364\226\203 #p\245g\317\012",
  "r\323\341\342f\233\317\200\212\221ad\224\334\370",
  "r\323\341\342supp\233\200wa\211\235\207\275\370",
  "\244\210-\334\227\352\312\330\246cl\204\227\361f\233\201\244\375\252\326",
  "\042\314e\264\315\352\312\270\253\202\373\241\206\315\277\271",
  "\252\262\330\222 \273(\262\326"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*100*/  "cannot read from file: \"%s\"\n",
/*101*/  "cannot write to file: \"%s\"\n",
/*102*/  "table overflow: \"%s\"\n",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               parser stack (recursive include?)
           *               option table (response file)
           *               peephole optimizer table
           */
/*103*/  "insufficient memory\n",
/*104*/  "invalid assembler instruction \"%s\"\n",
/*105*/  "numeric overflow, exceeding capacity\n"
#else
  "\355\221a\205from file\344",
  "\355wr\300\201\347 file\344",
  "t\307ov\210f\346w\344",
  "\203suff\345i\207\200mem\233y\012",
  "\253\256se\232l\267\203\234ru\223\226\220\012",
  "\333m\210\345 ov\210f\346w\340\257ce\254\357capac\300y\012"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters\n",
/*201*/  "redefinition of constant (symbol \"%s\")\n",
/*202*/  "number of arguments does not match definition\n",
/*203*/  "symbol is never used: \"%s\"\n",
/*204*/  "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/  "redundant code: constant expression is zero\n",
/*206*/  "redundant test: constant expression is non-zero\n",
/*207*/  "unknown #pragma\n",
/*208*/  "function uses both \"return;\" and \"return <value>;\"\n",
/*209*/  "function \"%s\" should return a value\n",
/*210*/  "possible use of symbol before initialization: \"%s\"\n",
/*211*/  "possibly unintended assignment\n",
/*212*/  "possibly unintended bitwise operation\n",
/*213*/  "tag mismatch\n",
/*214*/  "array argument %s isn't altered, should mark it as \"const\"\n",
/*215*/  "expression has no effect\n",
/*216*/  "nested comment\n",
/*217*/  "loose indentation\n",
/*218*/  "old style prototypes used with optional semicolumns\n",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/  "exported or native symbol \"%s\" is truncated to %d characters\n",
/*221*/  "label name \"%s\" shadows tag name\n",
/*222*/  "number of digits exceeds rational number precision\n",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")\n",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")\n"
#else
  "\277\260 \270tr\214c\213\227\347 %\205\255\360\223\210\271",
  "\221\334\300\226\304\376(\277\260\236",
  "\342\304\243t\211do\335\235\356 \334\300\206\012",
  "\374\270nev\267\244\254\344",
  "\374\270\256\231gn\227\266\365\201t\331\200\270nev\267\244\254\344",
  "\221d\214d\322co\246: \376\351\226\270z\210o\012",
  "\221d\214d\322te\234: \376\351\226\270n\202-z\210o\012",
  "\214k\225wn #p\245g\317\012",
  "\252\244\335bo\362\373\221turn;\315\222\205\042\221turn <\365e>;\371",
  "\252\220 sho\332\205\221turn \266\365\303",
  "\363s\231\247\201\244\201\304\374\361f\233\201\203\300i\212iz\323\344",
  "\363s\231\247\224\214\203t\207d\227\256\231gn\215\354",
  "\363s\231\247\224\214\203t\207d\227b\300w\364\201\325\323\012",
  "ta\311m\364\356\012",
  "\273\262%\211\364n'\200\212t\210\254\340sho\332\205m\204k i\200a\211\042\327\371",
  "\351\226\331\211\225 effe\223\012",
  "ne\234\227com\215\354",
  "\346os\201\203d\207t\323\012",
  "\261\205\234y\366pro\347typ\335\244\227w\300h \321t\206\341sem\345\261umn\271",
  "\346c\341\316\220 s\331dow\211\266\316a\200\266\272c\254\357level\012",
  "\257p\233t\227\312n\213i\367\277\260 \270tr\214c\213\227\347 %\205\255\360\223\210\271",
  "la\361l nam\201\220 s\331dow\211ta\311nam\303",
  "\342\304\320g\300\211\257ce\254\211r\323\341\342\272c\364\206\012",
  "\221d\214d\322\042\314e\264\042: \262\314\201\270\212way\2111 (\277\260\236",
  "\203\246t\210m\203\213\201\273\314\201\203\373\314e\264\315\351\226(\277\260\236"
#endif
       };
